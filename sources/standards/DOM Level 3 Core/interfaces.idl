// Introduced DOM Level 3:
interface DOMStringList {
  DOMString          item(unsigned long index);
  readonly attribute unsigned long   length;
  boolean            contains(DOMString str);
};

// Introduced DOM Level 3:
interface NameList {
  DOMString          getName(unsigned long index);
  DOMString          getNamespaceURI(unsigned long index);
  readonly attribute unsigned long   length;
  boolean            contains(DOMString str);
  boolean            containsNS(DOMString namespaceURI,
                                DOMString name);
};

// Introduced DOM Level 3:
interface DOMImplementationList {
  DOMImplementation  item(unsigned long index);
  readonly attribute unsigned long   length;
};

// Introduced DOM Level 3:
interface DOMImplementationSource {
  DOMImplementation  getDOMImplementation(DOMString features);
  DOMImplementationList getDOMImplementationList(DOMString features);
};

interface DOMImplementation {
  boolean            hasFeature(DOMString feature,
                                DOMString version);
  // Introduced DOM Level 2:
  DocumentType       createDocumentType(DOMString qualifiedName,
                                        DOMString publicId,
                                        DOMString systemId);
  // Introduced DOM Level 2:
  Document           createDocument(DOMString namespaceURI,
                                    DOMString qualifiedName,
                                    DocumentType doctype);
  // Introduced DOM Level 3:
  DOMObject          getFeature(DOMString feature,
                                DOMString version);
};

interface Node {

  // NodeType
  const unsigned short      ELEMENT_NODE                   = 1;
  const unsigned short      ATTRIBUTE_NODE                 = 2;
  const unsigned short      TEXT_NODE                      = 3;
  const unsigned short      CDATA_SECTION_NODE             = 4;
  const unsigned short      ENTITY_REFERENCE_NODE          = 5;
  const unsigned short      ENTITY_NODE                    = 6;
  const unsigned short      PROCESSING_INSTRUCTION_NODE    = 7;
  const unsigned short      COMMENT_NODE                   = 8;
  const unsigned short      DOCUMENT_NODE                  = 9;
  const unsigned short      DOCUMENT_TYPE_NODE             = 10;
  const unsigned short      DOCUMENT_FRAGMENT_NODE         = 11;
  const unsigned short      NOTATION_NODE                  = 12;

  readonly attribute DOMString       nodeName;
           attribute DOMString       nodeValue;
                                      // raises(DOMException) on setting
                                      // raises(DOMException) on retrieval

  readonly attribute unsigned short  nodeType;
  readonly attribute Node            parentNode;
  readonly attribute NodeList        childNodes;
  readonly attribute Node            firstChild;
  readonly attribute Node            lastChild;
  readonly attribute Node            previousSibling;
  readonly attribute Node            nextSibling;
  readonly attribute NamedNodeMap    attributes;
  // Modified DOM Level 2:
  readonly attribute Document        ownerDocument;
  // Modified DOM Level 3:
  Node               insertBefore(Node newChild,
                                  Node refChild);
  // Modified DOM Level 3:
  Node               replaceChild(Node newChild,
                                  Node oldChild);
  // Modified DOM Level 3:
  Node               removeChild(Node oldChild);
  // Modified DOM Level 3:
  Node               appendChild(Node newChild);
  boolean            hasChildNodes();
  Node               cloneNode(boolean deep);
  // Modified DOM Level 3:
  void               normalize();
  // Introduced DOM Level 2:
  boolean            isSupported(DOMString feature,
                                 DOMString version);
  // Introduced DOM Level 2:
  readonly attribute DOMString       namespaceURI;
  // Introduced DOM Level 2:
           attribute DOMString       prefix;
                                      // raises(DOMException) on setting

  // Introduced DOM Level 2:
  readonly attribute DOMString       localName;
  // Introduced DOM Level 2:
  boolean            hasAttributes();
  // Introduced DOM Level 3:
  readonly attribute DOMString       baseURI;

  // DocumentPosition
  const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;
  const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;
  const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;
  const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;
  const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;
  const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

  // Introduced DOM Level 3:
  unsigned short     compareDocumentPosition(Node other);
  // Introduced DOM Level 3:
           attribute DOMString       textContent;
                                      // raises(DOMException) on setting
                                      // raises(DOMException) on retrieval

  // Introduced DOM Level 3:
  boolean            isSameNode(Node other);
  // Introduced DOM Level 3:
  DOMString          lookupPrefix(DOMString namespaceURI);
  // Introduced DOM Level 3:
  boolean            isDefaultNamespace(DOMString namespaceURI);
  // Introduced DOM Level 3:
  DOMString          lookupNamespaceURI(DOMString prefix);
  // Introduced DOM Level 3:
  boolean            isEqualNode(Node arg);
  // Introduced DOM Level 3:
  DOMObject          getFeature(DOMString feature,
                                DOMString version);
  // Introduced DOM Level 3:
  DOMUserData        setUserData(DOMString key,
                                 DOMUserData data,
                                 UserDataHandler handler);
  // Introduced DOM Level 3:
  DOMUserData        getUserData(DOMString key);
};

interface NodeList {
  Node               item(unsigned long index);
  readonly attribute unsigned long   length;
};

interface NamedNodeMap {
  Node               getNamedItem(DOMString name);
  Node               setNamedItem(Node arg);
  Node               removeNamedItem(DOMString name);
  Node               item(unsigned long index);
  readonly attribute unsigned long   length;
  // Introduced DOM Level 2:
  Node               getNamedItemNS(DOMString namespaceURI,
                                    DOMString localName);
  // Introduced DOM Level 2:
  Node               setNamedItemNS(Node arg);
  // Introduced DOM Level 2:
  Node               removeNamedItemNS(DOMString namespaceURI,
                                       DOMString localName);
};

interface CharacterData : Node {
           attribute DOMString       data;
                                      // raises(DOMException) on setting
                                      // raises(DOMException) on retrieval

  readonly attribute unsigned long   length;
  DOMString          substringData(unsigned long offset,
                                   unsigned long count);
  void               appendData(DOMString arg);
  void               insertData(unsigned long offset,
                                DOMString arg);
  void               deleteData(unsigned long offset,
                                unsigned long count);
  void               replaceData(unsigned long offset,
                                 unsigned long count,
                                 DOMString arg);
};

interface Attr : Node {
  readonly attribute DOMString       name;
  readonly attribute boolean         specified;
           attribute DOMString       value;
                                      // raises(DOMException) on setting

  // Introduced DOM Level 2:
  readonly attribute Element         ownerElement;
  // Introduced DOM Level 3:
  readonly attribute TypeInfo        schemaTypeInfo;
  // Introduced DOM Level 3:
  readonly attribute boolean         isId;
};

interface Element : Node {
  readonly attribute DOMString       tagName;
  DOMString          getAttribute(DOMString name);
  void               setAttribute(DOMString name,
                                  DOMString value);
  void               removeAttribute(DOMString name);
  Attr               getAttributeNode(DOMString name);
  Attr               setAttributeNode(Attr newAttr);
  Attr               removeAttributeNode(Attr oldAttr);
  NodeList           getElementsByTagName(DOMString name);
  // Introduced DOM Level 2:
  DOMString          getAttributeNS(DOMString namespaceURI,
                                    DOMString localName);
  // Introduced DOM Level 2:
  void               setAttributeNS(DOMString namespaceURI,
                                    DOMString qualifiedName,
                                    DOMString value);
  // Introduced DOM Level 2:
  void               removeAttributeNS(DOMString namespaceURI,
                                       DOMString localName);
  // Introduced DOM Level 2:
  Attr               getAttributeNodeNS(DOMString namespaceURI,
                                        DOMString localName);
  // Introduced DOM Level 2:
  Attr               setAttributeNodeNS(Attr newAttr);
  // Introduced DOM Level 2:
  NodeList           getElementsByTagNameNS(DOMString namespaceURI,
                                            DOMString localName);
  // Introduced DOM Level 2:
  boolean            hasAttribute(DOMString name);
  // Introduced DOM Level 2:
  boolean            hasAttributeNS(DOMString namespaceURI,
                                    DOMString localName);
  // Introduced DOM Level 3:
  readonly attribute TypeInfo        schemaTypeInfo;
  // Introduced DOM Level 3:
  void               setIdAttribute(DOMString name,
                                    boolean isId);
  // Introduced DOM Level 3:
  void               setIdAttributeNS(DOMString namespaceURI,
                                      DOMString localName,
                                      boolean isId);
  // Introduced DOM Level 3:
  void               setIdAttributeNode(Attr idAttr,
                                        boolean isId);
};

interface Text : CharacterData {
  Text               splitText(unsigned long offset);
  // Introduced DOM Level 3:
  readonly attribute boolean         isElementContentWhitespace;
  // Introduced DOM Level 3:
  readonly attribute DOMString       wholeText;
  // Introduced DOM Level 3:
  Text               replaceWholeText(DOMString content);
};

interface Comment : CharacterData {
};

// Introduced DOM Level 3:
interface TypeInfo {
  readonly attribute DOMString       typeName;
  readonly attribute DOMString       typeNamespace;

  // DerivationMethods
  const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
  const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
  const unsigned long       DERIVATION_UNION               = 0x00000004;
  const unsigned long       DERIVATION_LIST                = 0x00000008;

  boolean            isDerivedFrom(DOMString typeNamespaceArg,
                                   DOMString typeNameArg,
                                   unsigned long derivationMethod);
};

// Introduced DOM Level 3:
interface UserDataHandler {

  // OperationType
  const unsigned short      NODE_CLONED                    = 1;
  const unsigned short      NODE_IMPORTED                  = 2;
  const unsigned short      NODE_DELETED                   = 3;
  const unsigned short      NODE_RENAMED                   = 4;
  const unsigned short      NODE_ADOPTED                   = 5;

  void               handle(unsigned short operation,
                            DOMString key,
                            DOMUserData data,
                            Node src,
                            Node dst);
};

// Introduced DOM Level 3:
interface DOMError {

  // ErrorSeverity
  const unsigned short      SEVERITY_WARNING               = 1;
  const unsigned short      SEVERITY_ERROR                 = 2;
  const unsigned short      SEVERITY_FATAL_ERROR           = 3;

  readonly attribute unsigned short  severity;
  readonly attribute DOMString       message;
  readonly attribute DOMString       type;
  readonly attribute DOMObject       relatedException;
  readonly attribute DOMObject       relatedData;
  readonly attribute DOMLocator      location;
};

// Introduced DOM Level 3:
interface DOMErrorHandler {
  boolean            handleError(DOMError error);
};

// Introduced DOM Level 3:
interface DOMLocator {
  readonly attribute long            lineNumber;
  readonly attribute long            columnNumber;
  readonly attribute long            byteOffset;
  readonly attribute long            utf16Offset;
  readonly attribute Node            relatedNode;
  readonly attribute DOMString       uri;
};

// Introduced DOM Level 3:
interface DOMConfiguration {
  void               setParameter(DOMString name,
                                  DOMUserData value);
  DOMUserData        getParameter(DOMString name);
  boolean            canSetParameter(DOMString name,
                                     DOMUserData value);
  readonly attribute DOMStringList   parameterNames;
};

interface CDATASection : Text {
};

interface DocumentType : Node {
  readonly attribute DOMString       name;
  readonly attribute NamedNodeMap    entities;
  readonly attribute NamedNodeMap    notations;
  // Introduced DOM Level 2:
  readonly attribute DOMString       publicId;
  // Introduced DOM Level 2:
  readonly attribute DOMString       systemId;
  // Introduced DOM Level 2:
  readonly attribute DOMString       internalSubset;
};

interface Notation : Node {
  readonly attribute DOMString       publicId;
  readonly attribute DOMString       systemId;
};

interface Entity : Node {
  readonly attribute DOMString       publicId;
  readonly attribute DOMString       systemId;
  readonly attribute DOMString       notationName;
  // Introduced DOM Level 3:
  readonly attribute DOMString       inputEncoding;
  // Introduced DOM Level 3:
  readonly attribute DOMString       xmlEncoding;
  // Introduced DOM Level 3:
  readonly attribute DOMString       xmlVersion;
};

interface EntityReference : Node {
};

interface ProcessingInstruction : Node {
  readonly attribute DOMString       target;
           attribute DOMString       data;
                                      // raises(DOMException) on setting

};

interface DocumentFragment : Node {
};

interface Document : Node {
  // Modified DOM Level 3:
  readonly attribute DocumentType    doctype;
  readonly attribute DOMImplementation implementation;
  readonly attribute Element         documentElement;
  Element            createElement(DOMString tagName);
  DocumentFragment   createDocumentFragment();
  Text               createTextNode(DOMString data);
  Comment            createComment(DOMString data);
  CDATASection       createCDATASection(DOMString data);
  ProcessingInstruction createProcessingInstruction(DOMString target,
                                                    DOMString data);
  Attr               createAttribute(DOMString name);
  EntityReference    createEntityReference(DOMString name);
  NodeList           getElementsByTagName(DOMString tagname);
  // Introduced DOM Level 2:
  Node               importNode(Node importedNode,
                                boolean deep);
  // Introduced DOM Level 2:
  Element            createElementNS(DOMString namespaceURI,
                                     DOMString qualifiedName);
  // Introduced DOM Level 2:
  Attr               createAttributeNS(DOMString namespaceURI,
                                       DOMString qualifiedName);
  // Introduced DOM Level 2:
  NodeList           getElementsByTagNameNS(DOMString namespaceURI,
                                            DOMString localName);
  // Introduced DOM Level 2:
  Element            getElementById(DOMString elementId);
  // Introduced DOM Level 3:
  readonly attribute DOMString       inputEncoding;
  // Introduced DOM Level 3:
  readonly attribute DOMString       xmlEncoding;
  // Introduced DOM Level 3:
           attribute boolean         xmlStandalone;
                                      // raises(DOMException) on setting

  // Introduced DOM Level 3:
           attribute DOMString       xmlVersion;
                                      // raises(DOMException) on setting

  // Introduced DOM Level 3:
           attribute boolean         strictErrorChecking;
  // Introduced DOM Level 3:
           attribute DOMString       documentURI;
  // Introduced DOM Level 3:
  Node               adoptNode(Node source);
  // Introduced DOM Level 3:
  readonly attribute DOMConfiguration domConfig;
  // Introduced DOM Level 3:
  void               normalizeDocument();
  // Introduced DOM Level 3:
  Node               renameNode(Node n,
                                DOMString namespaceURI,
                                DOMString qualifiedName);
};
